package com.qentelli.automation.utilities;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Properties;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.qentelli.automation.exceptions.base.AutomationIssueException;
import com.qentelli.automation.singletons.RuntimeSingleton;

public class RuntimeProperties {
	Logger logger = LogManager.getLogger(RuntimeProperties.class);
	public static String tmp = System.getProperty("java.io.tmpdir");
	public String locale = System.getProperty("locale");

	String filename = null;
	public String fullPath = null;
	private Properties prop = new Properties();
	String orderNumber = null;

	public RuntimeProperties() {

		filename = buildFileName();
		fullPath = tmp + File.separator + filename;
		logger.info("runtime@" + fullPath);

		prop = loadTempProps();

	}

	public RuntimeProperties(Boolean deleteFile) {

		filename = buildFileName();
		fullPath = tmp + File.separator + filename;
		logger.info("runtime@" + fullPath);

		if (deleteFile != null && deleteFile)
			deleteIfExists();

		prop = loadTempProps();

	}

	public String buildFileName() {
		return RuntimeSingleton.getInstance().runid + "_" + Thread.currentThread().getId() + "_"
				+ AbstractResourceBundle.getEnv() + "_" + locale + ".properties";
	}

	private Properties loadTempProps() {
		File f = new File(fullPath);
		// logger.info(f.exists() + " properties file " + fullPath);
		if (!f.exists()) {
			try {
				f.createNewFile();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		try (InputStream input = new FileInputStream(fullPath)) {
			prop.load(input);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return prop;
	}

	public void writeProp(String k, String v) {
		if (prop == null)
			throw new AutomationIssueException("properties file cannot be null");
		// 
		// here prop = loadTempProps();
		if (v == null) {
			logger.warn("Property <" + k + "> null detected @" + v);
		}
		prop.setProperty(k, v);

		try {
			FileOutputStream os = new FileOutputStream(fullPath);
			prop.store(os, "this file is generated by automation");
			os.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		logger.info(String.format("%-25s<>%-20s",k , v));
	}

	public String readProp(String k) {
		String v = prop.getProperty(k);
		logger.info(String.format("%s<>%s",k , v));
		return v;

	}

	public String getOrderNumber() {
		if (orderNumber == null)
			orderNumber = readProp("ORDERNUMBER");

		return orderNumber;
	}

	public String getProfileId() {
		return readProp("PROFILEID");
	}

	public String getGNC() {
		return readProp("GNC");
	}

	public String getSponsorId() {
		return readProp("SPONSOR");
	}

	public void setProfileId(String p) {
		writeProp("PROFILEID", p);
	}

	public String getProcessFlag() {
		if (readProp("PROCESS_FLAG") == null) {
			logger.info("process flag null condition");
			return "process flag null";
		}

		return readProp("PROCESS_FLAG");
	}

	public String getIcentrisProcessFlag() {
		return readProp("ICENTRIS_PROCESS_FLAG");
	}

	public String getErrorMsg() {
		return readProp("ERROR_MESSAGE");
	}

	public String getGNCProcessFlag() {
		return readProp("GNC_PROCESS_FLAG");
	}

	public String getFlowStatusCode() {
		return readProp("FLOW_STATUS_CODE");
	}

	public String getEmail() {
		return readProp("EMAIL");
	}

	public String getTestrail() {
		return readProp("TESTRAIL");
	}

	public void setOrderNumber(String order) {
		writeProp("ORDERNUMBER", order);
	}

	public void clearOrderNumber() {
		orderNumber = null;
	}

	public void deleteIfExists() {
		try {
			Files.deleteIfExists(Paths.get(filename));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
}
